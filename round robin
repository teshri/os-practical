#include <iostream> 
#include <iomanip>
 #include <vector> 
 #include <algorithm>
  #include <cstring> 
  #include <vector> 
  using namespace std;
int execute1(string s, string exe[], int index, int bt, int *arival)
{

for (int i = index; i < bt; i++)
{

exe[i] = s;
}


*arival = bt; return bt;
}

int main()
{


vector<int> myvec; vector<int>::iterator it; it = myvec.begin();
int size;
cout << "Enter the number of process: " ;
     cin >> size;
string process[size];
cout << "enter name of process \n"; for (int i = 0; i < size; i++)
{

cin >> process[i];
}

cout << "enter the arival time of pocesss \n"; int time[size];
for (int i = 0; i < size; i++)
{

cin >> time[i];
}

int bt[size];
cout << "enter the burst time of process \n";


for (int i = 0; i < size; i++)
{

cin >> bt[i];
}

int timeqt;
cout << "\n Enter the time quntum of algorithm : "; cin >> timeqt;
int temptime; string tempstr;
for (int i = 0; i < size; i++)
{

for (int j = i + 1; j < size; j++)
 
{
if (time[j] < time[i])
{

temptime = time[i]; time[i] = time[j]; time[j] = temptime; temptime = bt[i]; bt[i] = bt[j];
bt[j] = temptime; tempstr = process[i]; process[i] = process[j]; process[j] = tempstr;
}
}
}


int sum = 0, g, b = 0;
for (int i = 0; i < size; i++)
{

sum = sum + bt[i];
}

int temparival[size]; int tempbt[size];
for (int i = 0; i < size; i++)
{

temparival[i] = time[i]; tempbt[i] = bt[i];
}
 
int bt2 = 0; string exe[sum]; int arival = 0; int temp = 0, p; int j = 0;
temp = temparival[0]; int a = 0;
int index = 0; while (j != size)
{

j = 0;


if (a == 0)
{

a = 1;
temp = temparival[0]; p = 0;
for (int i = 0; i < size; i++)
{

if (temp > temparival[i])
{

temp = temparival[i]; p = i;
}
}


if (timeqt > tempbt[p])
{
 


bt2 = bt2 + tempbt[p]; tempbt[p] = 0;


b = execute1(process[p], exe, index, bt2, &arival); index = b;
}

else
{

bt2 = bt2 + timeqt;


tempbt[p] = tempbt[p] - timeqt;
b = execute1(process[p], exe, index, bt2, &arival); index = b;
}

for (int k = 0; k < size; k++)
{

if (temparival[k] <= arival && tempbt[k] == bt[k])
{

int t;
t = count(myvec.begin(), myvec.end(), k); if (t == 0)
{

myvec.push_back(k);
}
}
}

if (tempbt[p] != 0)
 
{
myvec.push_back(p);
}
}

else
{


g = myvec.front();


it = myvec.begin(); myvec.erase(it);

if (timeqt > tempbt[g])
{

bt2 = bt2 + tempbt[g]; tempbt[g] = 0;


b = execute1(process[g], exe, index, bt2, &arival); index = b;
}

else
{

bt2 = bt2 + timeqt;
tempbt[g] = tempbt[g] - timeqt;


b = execute1(process[g], exe, index, bt2, &arival); index = b;
}
 
for (int k = 0; k < size; k++)
{

if (temparival[k] <= arival && tempbt[k] == bt[k])
{

int t;
t = count(myvec.begin(), myvec.end(), k); if (t == 0)
{

myvec.push_back(k);
}
}
}

if (tempbt[g] != 0)
{

myvec.push_back(g);
}
}

for (int i = 0; i < size; i++)
{

if (tempbt[i] == 0)
{

j++;
}
}
}

cout << "\n sum" << sum << endl;
cout << "execution of process in qu: "; for (int i = 0; i < sum; i++)
 
{
cout << exe[i] << " ";
}

int complition[size]; int Tat[size];
int waiting[size]; int rt[size];
for (int i = 0; i < size; i++)
{

for (int j = sum - 1; i >= 0; j--)
{

if (process[i] == exe[j])
{

complition[i] = j + 1; break;
}
}
}

for (int i = 0; i < size; i++)
{

Tat[i] = (complition[i] - time[i]);
waiting[i] = Tat[i] - bt[i];
}

for (int i = 0; i < size; i++)
{

for (int j = 0; j < sum; j++)
{

if (process[i] == exe[j])
 

{		
rt[i] = j - time[i];		
break;		
}		
}		
}		
cout << "\nprocess	"	
<< "arival time	"		
<< " burst time	"	
<< "complication	"	
<< "	Turn around		"
<< " waiting time		"

<< "response time" << endl; for (int i = 0; i < size; i++)
{


cout << process[i] << setw(20) << time[i] << setw(20) << bt[i] << setw(20) << complition[i] << setw(20)
<< Tat[i] << setw(20) << waiting[i] << setw(20) << rt[i] << endl;
}
float sum1 = 0, sum2 = 0, sum3 = 0;


for (int i = 0; i < size; i++)
{

sum1 = sum1 + waiting[i]; sum2 = sum2 + Tat[i];
sum3 = sum3 + complition[i];
}

float avg = sum1 / size;
 
float avgtat = sum2 / size;
cout << "\nTotal complition time = " << sum3 << endl; cout << "\nAverage waiting time = " << avg << endl;
cout << "Average turn around time = " << avgtat << endl;


return 0;
}
